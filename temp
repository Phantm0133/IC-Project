
#include<stdio.h>
#include <stdlib.h>
#include <time.h>
#include<conio.h>
#include<ctype.h>
//UwU
void initializeGame(int board[4][4]);
void spawnTile(int board[4][4]);
void printBoard(int board[4][4]);
void moveUp(int board[4][4]);
void moveDown(int board[4][4]);
void moveRight(int board[4][4]);
void moveLeft(int board[4][4]);
void score(int board[4][4]);
int checkGameOver(int board[4][4]);
void saveadventure(int board[4][4] , int score );
int previousgame(int board[4][4]) ;
int main() {
    srand(time(0));

    int board[4][4];
    int gameOver = 0;
    char input;
    char wish;
    int score =0;
     printf("DO YOU WISH TO LOAD A SAVED ADVENTURE? \n");
     printf("PRESS ANY KEY TO LOAD LAST GAME \n PRESS N FOR NEW GAME \n");
     wish = _getch();
     if(wish=='n' || wish =='N') {
        initializeGame(board);
        } 
      if (wish=='y' || wish=='Y') {
        score = previousgame(board);
      }
      else 
      printf("GIVE A APPROPRIATE INPUT");
    //initializeGame(board);
    //score(board);

    while(gameOver==0) {
        printBoard(board);
        printf("Press W (Up), A (Left), S (Down), D (Right) to move tiles. Press Q to exit.\n");

        input = _getch();

        if(input=='q' || input=='Q'){
            printf("DO YOU WISH TO SAVE THIS ADVENTURE? ");
            printf("PRESS Y TO SAVE ");
            printf("PRESS N TO EXIT DIRECTLY");
            char exitwish;
            exitwish= _getch();
            if(exitwish=='Y' || exitwish=='y') {
                saveadventure(board ,score);
            }
            if (exitwish=='n' || exitwish=='N') {
            break;
            }
        }

        switch(tolower(input)){
            case 'w': moveUp(board); spawnTile(board); break;
            case 'a': moveLeft(board); spawnTile(board); break;
            case 'd': moveRight(board); spawnTile(board); break;
            case 's': moveDown(board); spawnTile(board); break;
            case '8': moveUp(board); spawnTile(board); break;
            case '4': moveLeft(board); spawnTile(board); break;
            case '6': moveRight(board); spawnTile(board); break;
            case '2': moveDown(board); spawnTile(board); break;
            default: printf("Invalid Input."); continue;
        }
    }

    return 0;
}

void initializeGame(int board[4][4]){
    for(int i=0; i < 4; i++){
        for(int j=0; j < 4; j++){
            board[i][j] = 0;
        }
    }
    spawnTile(board);
    spawnTile(board);
}

void spawnTile(int board[4][4]){
    int x, y;
    do{
        x = rand()%4;
        y = rand()%4;
    } while(board[x][y] != 0);

    int arr[10] = {2, 2, 2, 2, 2, 2, 2, 2, 2, 4};  //Array that spawns 2 with 90% chance and 4 with 10% chance
    board[x][y] = arr[rand()%10];
}

void printBoard(int board[4][4]){
   printf("\n");
    for (int i = 0; i < 4; i++){
        for (int j = 0; j < 4; j++){
            if(board[i][j] == 0){
                printf(".   ");
            } 
            else{
                printf("%-4d", board[i][j]); 
            }
        }
        printf("\n");
    }
    printf("\n");
}

//In progress
void score(int board[4][4]){
    //Calculate current score.
int currentScore=0;
for(int i=0;i<4;i++) {
    for (int j=0;j<4;j++) {
        currentScore+=board[i][j];
    }
}


    //Retrieve high score from file.
    FILE *pF = fopen("hscr.txt", "r");
    int highScore=0;
if(pF!=NULL) {
    fscanf(pF, "%d", &highScore);



    fclose(pF);
}
// else {
//     printf("let's start \n");
// }
printf("current score: %d \n" ,currentScore);
printf("high score : %d \n" ,highScore);
if(currentScore>highScore) {
    pF=fopen("hscr.txt" , "w");
    if(pF!=NULL) {
        fprintf
    }
}
}

int checkGameOver(int board[4][4]) {
    
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == 0) {
                return 0;  // Game continues if there’s an empty tile
            }
        }
    }

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 3; j++) {  // Check only until the second-last column
            if (board[i][j] == board[i][j + 1]) {
                return 0;  // Game continues if there’s a possible horizontal merge
            }
        }
    }

    
    for (int j = 0; j < 4; j++) {
        for (int i = 0; i < 3; i++) {  // Check only until the second-last row
            if (board[i][j] == board[i + 1][j]) {
                return 0;  // Game continues if there’s a possible vertical merge
            }
        }
    }

    return 1;  // Game is over if no empty tiles or possible merges
}

void moveUp(int board[4][4]){
    for(int j = 0; j < 4; j++){  
        for(int i = 1; i < 4; i++){  
            int k = i; //Temporary variable to mimic i and be able to decrement itself.
            while(k > 0 && board[k-1][j] == 0){  
                int temp= board[k-1][j];  
                board[k-1][j] = board[k][j];
                board[k][j] = temp;
                k--;  // Move Up
            }
        }
    }
    
    for(int j = 0; j < 4; j++){
        for(int i = 0; i < 3; i++){  
            if(board[i][j] == board[i+1][j] && board[i][j] != 0){  // If tiles are the same
                board[i][j] *= 2;  // Double the value
                board[i+1][j] = 0;  
            }
        }
    }
    
    // After combining, shift all numbers to the Up again
    for(int j = 0; j < 4; j++){
        for(int i = 1; i < 4; i++){
            int k = i;
            while(k > 0 && board[k-1][j] == 0){  
                board[k-1][j] = board[k][j];
                board[k][j] = 0;
                k--;  // Move Up
            }
        }
    }
}
void moveLeft(int board[4][4]){
    for(int i = 0; i < 4; i++){  
        for(int j = 1; j < 4; j++){  
            int k = j; //Temporary variable to mimic i and be able to decrement itself.
            while(k > 0 && board[i][k-1] == 0){  
                int temp= board[i][k-1];  
                board[i][k-1] = board[i][k];
                board[i][k] = temp;
                k--;  // Move left
            }
        }
    }
    
    for(int i = 0; i < 4; i++){
        for(int j = 0; j < 3; j++){  
            if(board[i][j] == board[i][j+1] && board[i][j] != 0){  // If tiles are the same
                board[i][j] *= 2;  // Double the value
                board[i][j+1] = 0;  
            }
        }
    }
    
    // After combining, shift all numbers to the left again
    for(int i = 0; i < 4; i++){
        for(int j = 1; j < 4; j++){
            int k = j;
            while(k > 0 && board[i][k-1] == 0){  // While the left cell is empty
                board[i][k-1] = board[i][k];
                board[i][k] = 0;
                k--;  // Move left
            }
        }
    }
}
void moveRight(int board[4][4]){
    for(int i = 0; i < 4; i++){  
        for(int j = 2; j >= 0; j--){  
            int k = j; //Temporary variable to mimic i and be able to decrement itself.
            while(k < 3 && board[i][k+1] == 0){  
                int temp = board[i][k+1];  
                board[i][k+1] = board[i][k];
                board[i][k] = temp;
                k++;  // Move right
            }
        }
    }
    
    for(int i = 0; i < 4; i++){
        for(int j = 3; j > 0; j--){  
            if(board[i][j] == board[i][j-1] && board[i][j] != 0){  // If tiles are the same
                board[i][j] *= 2;  // Double the value
                board[i][j-1] = 0;  
            }
        }
    }
    
    for(int i = 0; i < 4; i++){
        for(int j = 2; j >= 0; j--){
            int k = j;
            while(k < 3 && board[i][k+1] == 0){ 
                board[i][k+1] = board[i][k];
                board[i][k] = 0;
                k++;  // Move right
            }
        }
    }
}
void moveDown(int board[4][4]){
    for(int j = 0; j < 4; j++){  
        for(int i = 2; i >=0; i--){  
            int k = i; //Temporary variable to mimic i and be able to decrement itself.
            while(k < 3 && board[k+1][j] == 0){  
                int temp= board[k+1][j];  //Swapping the cell with the empty cell below of it.
                board[k+1][j] = board[k][j];
                board[k][j] = temp;
                k++;  // Move Down
            }
        }
    }
    
    for(int j = 0; j < 4; j++){
        for(int i = 2; i >= 0; i--){  
            if(board[i][j] == board[i+1][j] && board[i][j] != 0){  // If tiles are the same
                board[i+1][j] *= 2;  // Double the value
                board[i][j] = 0;  
            }
        }
    }
    
    // After combining, shift all numbers to the Down again
    for(int j = 0; j < 4; j++){
        for(int i = 2; i >= 0; i--){
            int k = i;
            while(k < 3 && board[k+1][j] == 0){  
                board[k+1][j] = board[k][j];
                board[k][j] = 0;
                k++;  // Move Down
            }
        }
    }
}



void saveadventure(int board[4][4] , int score ) {
    FILE *game2048 =fopen("GAME2048.txt" , "w");
    if (game2048==NULL) {
        printf("LET'S START YOUR JOURNEY");
        return;

    }
    fprintf(game2048," \n SCORE IS %d \n BOARD : \n" ,score);
    for (int i=0;i<4;i++) {
        for (int j = 0; j < 4; j++)
        {
            /* code */
            fprintf(game2048,"%-4d" ,board[i][j]);
        }
        fprintf("\n");
        
    }
    fclose(game2048);
    // printf("I AM WAITING FOR YOU!!!");
}
int previousgame(int board[4][4]) {
    int score;
    FILE *game2048 =fopen("GAME2048.txt" , "r");
    if (game2048==NULL) {
        printf("CONGRATULATIONS YOU ARE THE FIRST TO PLAY THIS \n ");
        return 0;
    }
    fscanf(game2048,"SCORE IS %d \n " ,&score);
    fscanf(game2048,"BOARD \n");
for (int i = 0; i <4; i++)
{
    /* code */ 
    for (int  j = 0; j <4; j++)
    {
        /* code */
        fscanf(game2048 ,"%d" ,&board[i][j]);
    }
    
}
for(int i=0;i<4;i++) {
    for(int j=0;j<4;j++) {
        printf("%d" ,board[i][j]);
    }
}
fclose(game2048);
printf("NOW YOU CAN CONTINUE YOUR ADVENTURE!!! \n ") ;
return score;

}
